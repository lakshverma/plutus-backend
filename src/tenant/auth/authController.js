const jwt = require('jsonwebtoken');
const { TENANT_CONTEXT } = require('../../common/util/config');

const {
  createUserService,
  verifyUserService,
  checkExistingUserService,
  sendWelcomeEmailService,
} = require('./authService');

const createUser = async (req, res) => {
  const { body, user } = req;
  TENANT_CONTEXT.tenantInfo = user.orgId;
  TENANT_CONTEXT.userInfo = user.userId;

  const existingUser = await checkExistingUserService(body.email);

  if (existingUser) {
    return res.status(409).json({
      error: 'User already exists, try signing in or use another email id.',
    });
  }

  const newUserDetailsWithOrg = { orgId: user.orgId, ...body };

  // TODO:
  // 1. Make sure to add tenantContext in DAL function call inside the service
  // 2. Specify the org role of the newly created user
  const newUser = await createUserService(newUserDetailsWithOrg);
  await sendWelcomeEmailService(newUser);
  return res.status(201).json(newUser);
};

// Triggers the email confirmation flow. Used when user signs up but doesn't verify before
// the JWT token expires. This is used to re-trigger the confirmation flow with a fresh token.
const confirmEmail = async (req, res) => {
  const { body } = req;
  const existingUser = await checkExistingUserService(body.email);
  if (!existingUser) {
    return res.status(404).json({
      error: 'User does not exist.',
    });
  }

  if (existingUser.status === 'verified') {
    return res.status(409).json({
      error:
        'User already verified, try logging in with the correct credentials.',
    });
  }

  await sendWelcomeEmailService(existingUser);
  return res.status(204).end();
};

// Verify user account using email decoded from the JWT token generated by createTenant,
// createUser or confirmEmail controllers.
const verifyUser = async (req, res) => {
  const { params } = req;
  const secret = process.env.SECRET;
  const decodedToken = jwt.verify(params.token, secret);

  const foundUser = await checkExistingUserService(
    decodedToken.user_id,
    'user_id',
  );

  if (!foundUser) {
    return res.status(404).json({
      error: "User doesn't exist",
    });
  }
  const verifiedUser = await verifyUserService(foundUser.user_id);
  if (!verifiedUser) {
    return res.status(500).json({
      error: "Couldn't verify the user. Please try again later.",
    });
  }
  return res.status(200).json({
    status: verifiedUser,
  });
};

module.exports = {
  createUser,
  confirmEmail,
  verifyUser,
};
